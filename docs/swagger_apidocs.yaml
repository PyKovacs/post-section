swagger: "2.0"
info:
  description: "API interface for post management."
  version: "0.0.1"
  title: "Post_section"
  contact:
    email: "david.kovacs.1991@gmail.com"
host: "127.0.0.1:5000"
tags:
- name: "posts"
  description: "Interaction with posts"
schemes:
- "http"
paths:
  /posts:
    post:
      tags:
      - "posts"
      summary: "Creates a new post"
      description: "userId needs to be of existing user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "post_parameters"
        description: "Key-value pairs to add"
        required: true
        schema:
          $ref: "#/definitions/postPosts"
      responses:
        "201":
          description: "Post created"
          schema:
            $ref: "#/definitions/Post"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/jsonfail"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/userNA"
        "422":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/titlelong"
        "500":
          description: "Internal error"
  /posts/{post_id}:
    put:
      tags:
      - "posts"
      summary: "Updates an existing post"
      description: "Only title and/or body can be changed"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "post_id"
        description: "ID of post to update"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "post_parameters"
        description: "Post values to update"
        required: true
        schema:
          $ref: "#/definitions/updatePosts"
      responses:
        "200":
          description: "Updated"
          schema:
            $ref: "#/definitions/200_updatePost"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/jsonfail"
        "404":
          description: "Post ID not found"
          schema:
            $ref: "#/definitions/postNA"
        "422":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/titlelong"
    get:
      tags:
      - "posts"
      summary: "Finds a post by Post ID"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "post_id"
        description: "ID of post to get"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Post"
        "404":
          description: "Post ID not found"
          schema:
            $ref: "#/definitions/postNA"
        "500":
          description: "Internal error"
    delete:
      tags:
      - "posts"
      summary: "Removes a post"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "post_id"
        description: "ID of post to remove"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/deletepost"
        "404":
          description: "Post ID not found"
          schema:
            $ref: "#/definitions/postNA"
  /posts/from_user={user_id}:
    get:
      tags:
      - "posts"
      summary: "Finds all posts from specific user"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "user_id"
        description: "ID of user"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/Posts"
        "404":
          description: "Posts not found."
          schema:
            $ref: "#/definitions/noposts"
        "500":
          description: "Internal error"

definitions:
  Post:
    type: "object"
    required:
    - "userId"
    - "id"
    - "title"
    - "body"
    properties:
      userId:
        type: "integer"
        format: "int64"
        example: 6
      id:
        type: "integer"
        format: "int64"
        example: 5
      title:
        type: "string"
        example: "Post title"
      body:
        type: "string"
        example: "Per aspera ad astra."
  Posts:
    type: "array"
    items:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int64"
        id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
          example: "Post title"
        body:
          type: "string"
          example: "Per aspera ad astra."
    example:
      - userID: 6
        id: 5
        title: "Post title 1"
        body: "Per aspera ad astra."
      - userID: 6
        id: 24
        title: "Post title 2"
        body: "Cogito ergo sum."
  postPosts:
    type: "object"
    required:
    - "userId"
    - "title"
    - "body"
    properties:
      userId:
        type: "integer"
        format: "int64"
        example: 6
      title:
        type: "string"
        example: "Post title"
      body:
        type: "string"
        example: "Per aspera ad astra."
  updatePosts:
    type: "object"
    required:
    - "title"
    - "body"
    properties:
      title:
        type: "string"
        example: "Post title"
      body:
        type: "string"
        example: "Per aspera ad astra."
  200_updatePost:
    type: "object"
    properties:
      post:
        type: "object"
        properties:
          userId:
            type: "integer"
            format: "int64"
            example: 6
          id:
            type: "integer"
            format: "int64"
            example: 12
          title:
            type: "string"
            example: "Changed - Post title"
          body:
            type: "string"
            example: "Changed - Per aspera ad astra."
      update_status:
        type: "object"
        properties:
          body:
            type: "string"
            example: "Updated!"
          title:
            type: "string"
            example: "Updated!"
  userNA:
    type: "object"
    properties:
      msg:
        type: "string"
        example: "User not found."
  postNA:
    type: "object"
    properties:
      msg:
        type: "string"
        example: "Post ID 66 not found."
  deletepost:
    type: "object"
    properties:
      msg:
        type: "string"
        example: "Post with ID 66 deleted."
  noposts:
    type: "object"
    properties:
      msg:
        type: "string"
        example: "No posts from user 66."
  titlelong:
    type: "object"
    properties:
      msg:
        type: "string"
        example: "Title value is missing or too long (max 80 chars)."
  jsonfail:
    type: "object"
    properties:
      msg:
        type: "string"
        example: "Invalid JSON request."
        